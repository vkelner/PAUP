@model Paup.Models.Kalkulator

@{
    var isPruzatelj = ViewBag.IsPruzateljUsluga as bool? ?? false;
}

@{
    ViewData["Title"] = "Kalkulator fasade";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h2 class="text-center mb-4">Kalkulator fasade</h2>
            <p class="text-center mb-4">Prikazana cijena je aproksimacija i može varirati ovisno o stvarnim uvjetima i dodatnim troškovima. Za točnu ponudu, molimo kontaktirajte stručnjaka ili izvođača radova.</p>
            <div class="alert alert-warning" role="alert">
                <strong>Napomena:</strong> Za unos decimalnih brojeva koristite <code>.</code> (točka), a ne <code>,</code> (zarez).
            </div>

            <form asp-action="Index" method="post" id="kalkulatorForm" novalidate>
                @Html.AntiForgeryToken()
                <div class="text-danger mb-3" id="globalValidationSummary"></div>

                <div class="mb-3">
                    <label class="form-label">Vrsta materijala:</label>
                    <select asp-for="VrstaMaterijala"
                            asp-items="Html.GetEnumSelectList<Paup.Enum.VrstaMaterijala>()"
                            class="form-select" required></select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Debljina(cm):</label>
                    <input id="Debljina"
                           asp-for="Debljina"
                           type="number"
                           min="2" max="25" step="1"
                           placeholder="Unesite cijeli broj od 2 do 25."
                           class="form-control"
                           value=""
                           required />


                    <span id="debljinaGreska" class="text-danger"></span>
                </div>


                <div class="mb-3">
                    <label class="form-label">Broj zidova:</label>
                    <input asp-for="BrojZidova" id="brojZidova" min="1" max="40"
                           class="form-control" type="number"
                           placeholder="Unesi broj od 1 do 40."
                           value=""
                           />
                    <span id="brojZidovaGreska" class="text-danger"></span>

                </div>

                <button type="button" id="dodajZidoveBtn" class="btn btn-secondary mb-3" onclick="dodajZidove()">
                    Dodaj zidove
                </button>


                <div id="zidoviContainer">
                    @if (Model.BrojZidovaLista != null)
                    {
                        for (int i = 0; i < Model.BrojZidovaLista.Count; i++)
                        {
                            var zid = Model.BrojZidovaLista[i];

                            <div class="border p-2 my-2">
                                <h5>Zid @(i + 1)</h5>

                                <p class="mb-1"><strong>Visina:</strong> @zid.Visina&nbsp;m</p>
                                <p><strong>Širina:</strong> @zid.Sirina&nbsp;m</p>

                                @if (zid.Praznine?.Any() == true)
                                {
                                    <ul class="list-group list-group-flush">
                                        @for (int j = 0; j < zid.Praznine.Count; j++)
                                        {
                                            var p = zid.Praznine[j];
                                            <li class="list-group-item">
                                                <strong>@p.Tip</strong> –
                                                visina @p.Visina&nbsp;m × širina @p.Sirina&nbsp;m
                                            </li>

                                            <input type="hidden" name="BrojZidovaLista[@i].Praznine[@j].Tip"    value="@p.Tip"    />
                                            <input type="hidden" name="BrojZidovaLista[@i].Praznine[@j].Visina" value="@p.Visina" />
                                            <input type="hidden" name="BrojZidovaLista[@i].Praznine[@j].Sirina" value="@p.Sirina" />
                                        }
                                    </ul>
                                }

                                <input type="hidden" name="BrojZidovaLista[@i].Visina" value="@zid.Visina" />
                                <input type="hidden" name="BrojZidovaLista[@i].Sirina" value="@zid.Sirina" />
                            </div>
                        }
                    }
                </div>


                @if (isPruzatelj)
{
    <hr class="my-4" />
    <h4>Dodatni troškovi</h4>

    if (!(ViewBag.Calculated as bool? ?? false))
    {
        <div id="dodatniTroskoviContainer">
            @for (int i = 0; i < Model.DodatniTroskovi.Count; i++)
            {
                var t = Model.DodatniTroskovi[i];
                <div class="border p-2 mb-3 dodatni-trosak-blok">
                    <h5>Dodatni trošak @(i + 1)</h5>

                    <label>Naslov:</label>
                    <input name="DodatniTroskovi[@i].Naslov"
                           value="@t.Naslov"
                           class="form-control"
                           maxlength="50" required />
                    <span class="text-danger" data-valmsg-for="DodatniTroskovi[@i].Naslov"></span>

                    <label>Opis:</label>
                    <textarea name="DodatniTroskovi[@i].Opis"
                              class="form-control"
                              maxlength="200" required>@t.Opis</textarea>
                    <span class="text-danger" data-valmsg-for="DodatniTroskovi[@i].Opis"></span>

                    <label>Cijena (€):</label>
                    <input name="DodatniTroskovi[@i].Cijena"
                           value="@t.Cijena"
                           type="number" step="0.01" min="0" max="10000"
                           class="form-control" required />
                    <span class="text-danger" data-valmsg-for="DodatniTroskovi[@i].Cijena"></span>
                </div>
            }
        </div>

        <button type="button" class="btn btn-outline-primary mb-3"
                onclick="dodajTrosak()" id="dodajTrosakBtn">
            Dodaj trošak
        </button>
    }
    else
    {
        <ul class="list-group mb-3">
            @for (int i = 0; i < Model.DodatniTroskovi.Count; i++)
            {
                var t = Model.DodatniTroskovi[i];
                <li class="list-group-item d-flex justify-content-between align-items-start">
                    <div class="me-auto">
                        <div class="fw-bold">@t.Naslov</div>
                        <small>@t.Opis</small>
                    </div>
                    <span>@t.Cijena €</span>

                    <input type="hidden" name="DodatniTroskovi[@i].Naslov" value="@t.Naslov" />
                    <input type="hidden" name="DodatniTroskovi[@i].Opis"   value="@t.Opis"   />
                    <input type="hidden" name="DodatniTroskovi[@i].Cijena" value="@t.Cijena" />
                </li>
            }
        </ul>
    }
}



                <button type="submit" class="btn btn-secondary mt-3 w-100" id="submitBtn" style="display: none;">
                    Izračunaj
                </button>
                </form>

            @if (isPruzatelj && (ViewBag.Calculated as bool? ?? false))
            {
                <form asp-action="GenerirajPdf" method="post" id="pdfForm">
                    @Html.AntiForgeryToken()

                    <input type="hidden" name="VrstaMaterijala" value="@Model.VrstaMaterijala" />
                    <input type="hidden" name="Debljina"        value="@Model.Debljina" />
                    <input type="hidden" name="BrojZidova"      value="@Model.BrojZidova" />

                    <button type="submit" class="btn btn-success w-100 mt-2" id="generatePdfBtn">
                        Generiraj PDF
                    </button>
                </form>
            }


            @if (Model.BrojZidovaLista != null && Model.BrojZidovaLista.Any())
            {
                <hr class="my-4" />
                <h3 class="text-center">Rezultat kalkulacije</h3>
                <p><strong>Ukupna površina:</strong> @Model.UkupnaPovrsina m²</p>
                <p><strong>Cijena po m²:</strong> @Model.CijenaUkupnoPoM2 €</p>
                <p><strong>Ukupna cijena:</strong> @Model.UkupnaCijena €</p>
            }

            <div id="formErrorMessage" class="text-danger text-center mb-2 d-none">
                Molimo popunite sva obavezna polja.
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        
        let izracunajClicked = false;


        document.getElementById('submitBtn').addEventListener('click', function () {
            izracunajClicked = true;
            //document.getElementById('generatePdfBtn').disabled = false;
        });

        
        jQuery.extend(jQuery.validator.messages, {
            required: "Ovo polje je obavezno.",
            number: "Unesite broj.",
            maxlength: jQuery.validator.format("Unesite najviše {0} znakova."),
            minlength: jQuery.validator.format("Unesite najmanje {0} znakova."),
            rangelength: jQuery.validator.format("Unesite između {0} i {1} znakova."),
            range: jQuery.validator.format("Unesite vrijednost između {0} i {1}."),
            max: jQuery.validator.format("Unesite vrijednost manju ili jednaku {0}."),
            min: jQuery.validator.format("Unesite vrijednost veću ili jednaku {0}.")
            
        });

        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll("form").forEach(form => {
                form.setAttribute("novalidate", "novalidate");
            });

            document.addEventListener("input", validacijaForme);
        });
        
        function osvjeziLimitPraznina(zidIndex) {
            const novaVisina = parseFloat(document.getElementById(`visinaZida_${zidIndex}`).value) || 0;
            const novaSirina = parseFloat(document.getElementById(`sirinaZida_${zidIndex}`).value) || 0;

            document
                .querySelectorAll(`#praznineZida_${zidIndex} input[id^="prazninaVisina_${zidIndex}_"]`)
                .forEach(inp => {
                    inp.max = novaVisina;
                    if (parseFloat(inp.value) > novaVisina) inp.value = "";
                });

            document
                .querySelectorAll(`#praznineZida_${zidIndex} input[id^="prazninaSirina_${zidIndex}_"]`)
                .forEach(inp => {
                    inp.max = novaSirina;
                    if (parseFloat(inp.value) > novaSirina) inp.value = "";
                });
        }
        function dodajZidove() {
            const debljinaValid = validirajDebljinu();
            const brojZidovaValid = validirajBrojZidova();

            if (!debljinaValid || !brojZidovaValid) {
                return;
            }

            const maxZidova = 30;
            const brojInput = document.getElementById("brojZidova");
            const broj = parseInt(brojInput.value);
            const container = document.getElementById("zidoviContainer");

            if (isNaN(broj) || broj < 1 || broj > maxZidova) return;

            document.getElementById("VrstaMaterijala").disabled = true;
            document.getElementById("Debljina").readOnly        = true;
            brojInput.readOnly                                  = true;

            container.innerHTML = "";

            for (let i = 0; i < broj; i++) {
                const zidDiv = document.createElement("div");
                zidDiv.className = "border p-2 my-2";
                zidDiv.innerHTML = `
    <h5>Zid ${i + 1}</h5>
    <label>Visina(m):</label>
    <input id="visinaZida_${i}" name="BrojZidovaLista[${i}].Visina"
           type="number" step="0.5" min="0.5" max="100" required
           class="form-control" />
    <span class="field-validation-valid text-danger" data-valmsg-for="BrojZidovaLista[${i}].Visina" data-valmsg-replace="true"></span>
    <br>
    <label>Širina(m):</label>
    <input id="sirinaZida_${i}" name="BrojZidovaLista[${i}].Sirina"
           type="number" step="0.5" min="0.5" max="100" required
           class="form-control" />
    <span class="field-validation-valid text-danger" data-valmsg-for="BrojZidovaLista[${i}].Sirina" data-valmsg-replace="true"></span>
    <br>
    <div id="praznineZida_${i}" class="mt-3"></div>
    <button type="button" id="dodajPrazninuBtn_${i}"
            class="btn btn-sm btn-outline-secondary mt-2"
            onclick="dodajPrazninu(${i})" disabled>Dodaj prazninu</button>
`;

                setTimeout(() => {

                    document.getElementById(`visinaZida_${i}`)
                        .addEventListener("input", () => {
                            kontrolirajGumbPraznina(i);
                            osvjeziLimitPraznina(i);
                        });

                    document.getElementById(`sirinaZida_${i}`)
                        .addEventListener("input", () => {
                            kontrolirajGumbPraznina(i);
                            osvjeziLimitPraznina(i);
                        });
                }, 0);
                
                container.appendChild(zidDiv);
            }

            $.validator.unobtrusive.parse("#kalkulatorForm");
            validacijaForme();
            document.getElementById("submitBtn").style.display = "block";
        }

        function dodajPrazninu(zidIndex) {
            const container = document.getElementById(`praznineZida_${zidIndex}`);
            const broj = container.querySelectorAll(".praznina-blok").length;

            const zidVisina = parseFloat(document.getElementById(`visinaZida_${zidIndex}`).value);
            const zidSirina = parseFloat(document.getElementById(`sirinaZida_${zidIndex}`).value);

            const div = document.createElement("div");
            div.className = "bg-light p-2 my-1 praznina-blok";

            div.innerHTML = `
        <label>Tip praznine:</label>
<input name="BrojZidovaLista[${zidIndex}].Praznine[${broj}].Tip"
       id="prazninaTip_${zidIndex}_${broj}"
       class="form-control"
       placeholder="Prozor, vrata..." required
       oninput="validirajPrazninu(${zidIndex}, ${broj})" />
<span class="field-validation-valid text-danger"
      data-valmsg-for="BrojZidovaLista[${zidIndex}].Praznine[${broj}].Tip"
      data-valmsg-replace="true"></span>
        <br>
        <label>Visina(m):</label>
        <input id="prazninaVisina_${zidIndex}_${broj}"
               name="BrojZidovaLista[${zidIndex}].Praznine[${broj}].Visina"
               type="number" step="0.5" min="0.1"
               max="${zidVisina}"class="form-control" required
               oninput="validirajPrazninu(${zidIndex}, ${broj})" />
        <span class="field-validation-valid text-danger"
              data-valmsg-for="BrojZidovaLista[${zidIndex}].Praznine[${broj}].Visina"
              data-valmsg-replace="true"></span>
        <br>
        <label>Širina(m):</label>
        <input id="prazninaSirina_${zidIndex}_${broj}"
               name="BrojZidovaLista[${zidIndex}].Praznine[${broj}].Sirina"
               type="number" step="0.5" min="0.1"
               max="${zidSirina}" class="form-control" required
               oninput="validirajPrazninu(${zidIndex}, ${broj})" />
        <span class="field-validation-valid text-danger"
              data-valmsg-for="BrojZidovaLista[${zidIndex}].Praznine[${broj}].Sirina"
              data-valmsg-replace="true"></span>

        <div class="d-flex justify-content-end mt-2">
            <button type="button" class="btn btn-sm btn-danger"
                    onclick="this.closest('.praznina-blok').remove(); validacijaForme();">Obriši prazninu</button>
        </div>
    `;

            container.appendChild(div);
            osvjeziLimitPraznina(zidIndex);
            $.validator.unobtrusive.parse("#kalkulatorForm");
        }

        function validacijaForme() {
            const form = document.getElementById("kalkulatorForm");
            const submitBtn = document.getElementById("submitBtn");
            const errorMessage = document.getElementById("formErrorMessage");

            const requiredInputs = form.querySelectorAll("input[required], select[required]");
            let allFilled = true;

            requiredInputs.forEach(input => {
                if (input.offsetParent !== null && input.value.trim() === "") {
                    allFilled = false;
                }
            });

            submitBtn.disabled = !allFilled;
            errorMessage.classList.toggle("d-none", allFilled);
        }

        function dodajTrosak() {
            const container = document.getElementById("dodatniTroskoviContainer");
            const index = container.querySelectorAll(".dodatni-trosak-blok").length;

            const div = document.createElement("div");
            div.className = "border p-2 mb-3 dodatni-trosak-blok";

            div.innerHTML = `
        <h5>Dodatni trošak ${index + 1}</h5>

        <label>Naslov:</label>
        <input name="DodatniTroskovi[${index}].Naslov"
               class="form-control"
               data-val="true"
               data-val-required="Unesite naslov troška."
               maxlength="50" required />
        <span class="field-validation-valid text-danger"
              data-valmsg-for="DodatniTroskovi[${index}].Naslov"
              data-valmsg-replace="true"></span>
<br>
        <label>Opis:</label>
        <textarea name="DodatniTroskovi[${index}].Opis"
                  class="form-control"
                  maxlength="200"
                  required
                  data-val="true"
                  data-val-required="Unesite opis troška."></textarea>
        <span class="field-validation-valid text-danger"
              data-valmsg-for="DodatniTroskovi[${index}].Opis"
              data-valmsg-replace="true"></span>
<br>
        <label>Cijena (€):</label>
        <input name="DodatniTroskovi[${index}].Cijena"
               type="number"
               step="0.01"
               min="0"
               max="10000"
               class="form-control"
               required
               data-val="true"
               data-val-required="Unesite cijenu."
               data-val-range="Unesite valjanu cijenu." />
        <span class="field-validation-valid text-danger"
              data-valmsg-for="DodatniTroskovi[${index}].Cijena"
              data-valmsg-replace="true"></span>

        <div class="d-flex justify-content-end mt-2">
            <button type="button" class="btn btn-sm btn-danger"
                    onclick="this.closest('.dodatni-trosak-blok').remove();">
                Obriši trošak
            </button>
        </div>
    `;

            container.appendChild(div);
            $.validator.unobtrusive.parse("#kalkulatorForm");
        }

        let interakcijaPolja = true;

        function validirajFormu() {
            const zidoviValid = validirajBrojZidova();
            const debljinaValid = validirajDebljinu();
            document.getElementById("dodajZidoveBtn").disabled = !(zidoviValid && debljinaValid);
        }

        function validirajBrojZidova() {
            const input = document.getElementById("brojZidova");
            const error = document.getElementById("brojZidovaGreska");
            const value = input.value.trim();
            const broj = parseFloat(value);

            if (value === "") {
                error.textContent = "Polje je obavezno.";
                return false;
            }
            if (!Number.isFinite(broj)) {
                error.textContent = "Unesite broj.";
                return false;
            }
            if (!Number.isInteger(broj)) {
                error.textContent = "Unesite cijeli broj.";
                return false;
            }
            if (broj < 1 || broj > 40) {
                error.textContent = "Broj zidova mora biti između 1 i 40.";
                return false;
            }

            error.textContent = "";
            return true;
        }

        function validirajDebljinu() {
            const input = document.getElementById("Debljina");
            const error = document.getElementById("debljinaGreska");
            const value = input.value.trim();
            const broj  = Number(value);

            if (value === "") {
                error.textContent = "Polje je obavezno.";
                return false;
            }
            if (!Number.isFinite(broj)) {
                error.textContent = "Unesite broj.";
                return false;
            }
            if (!Number.isInteger(broj)) {
                error.textContent = "Unesite cijeli broj.";
                return false;
            }
            if (broj < 2 || broj > 25) {
                error.textContent = "Debljina mora biti između 2 i 25 cm.";
                return false;
            }

            error.textContent = "";
            return true;
        }

            document.addEventListener("DOMContentLoaded", () => {
            document.getElementById("brojZidova").addEventListener("input", validirajFormu);
            document.getElementById("Debljina").addEventListener("input", validirajFormu);
            
  
        });

        document.querySelector('#pdfForm').addEventListener('submit', function (e) {
            const pdfBtn = document.getElementById('generatePdfBtn');
            if (pdfBtn.hasAttribute('disabled')) {
                e.preventDefault();
                alert("Najprije kliknite 'Izračunaj' kako biste generirali PDF.");
                return;
            }


            this.querySelectorAll('.dynamic-field').forEach(el => el.remove());

            document.querySelectorAll('[name^="BrojZidovaLista"]').forEach(input => {
                const sakriveno = document.createElement('input');
                sakriveno.type = 'hidden';
                sakriveno.name = input.name;
                sakriveno.value = input.value;
                sakriveno.classList.add('dynamic-field');
                this.appendChild(sakriveno);
            });

            document.querySelectorAll('[name^="DodatniTroskovi"]').forEach(input => {
                const sakriveno = document.createElement('input');
                sakriveno.type = 'hidden';
                sakriveno.name = input.name;
                sakriveno.value = input.value;
                sakriveno.classList.add('dynamic-field');
                this.appendChild(sakriveno);
            });
        });

        function kontrolirajGumbPraznina(index) {
            const visina = parseFloat(document.getElementById(`visinaZida_${index}`).value);
            const sirina = parseFloat(document.getElementById(`sirinaZida_${index}`).value);
            const btn = document.getElementById(`dodajPrazninuBtn_${index}`);

            const valid = Number.isFinite(visina) && visina > 0 && Number.isFinite(sirina) && sirina > 0;
            btn.disabled = !valid;
        }
        
        function validirajPrazninu(zidIndex, prazninaIndex) {
            const zidVisina = parseFloat(document.getElementById(`visinaZida_${zidIndex}`).value);
            const zidSirina = parseFloat(document.getElementById(`sirinaZida_${zidIndex}`).value);
            const prazninaVisina = parseFloat(document.getElementById(`prazninaVisina_${zidIndex}_${prazninaIndex}`).value);
            const prazninaSirina = parseFloat(document.getElementById(`prazninaSirina_${zidIndex}_${prazninaIndex}`).value);

            const visinaError = document.querySelector(`[data-valmsg-for="BrojZidovaLista[${zidIndex}].Praznine[${prazninaIndex}].Visina"]`);
            const sirinaError = document.querySelector(`[data-valmsg-for="BrojZidovaLista[${zidIndex}].Praznine[${prazninaIndex}].Sirina"]`);

            const tipInput = document.getElementById(`prazninaTip_${zidIndex}_${prazninaIndex}`);
            const tipError = document.querySelector(`[data-valmsg-for="BrojZidovaLista[${zidIndex}].Praznine[${prazninaIndex}].Tip"]`);

            if (tipInput && tipError) {
                if (tipInput.value.trim() === "") {
                    tipError.textContent = "Ovo polje je obavezno.";
                } else {
                    tipError.textContent = "";
                }
}

            


            /*if (Number.isFinite(prazninaVisina) && prazninaVisina > zidVisina) {
                visinaError.textContent = `Praznina ne može biti viša od zida (${zidVisina}m).`;
            } else {
                visinaError.textContent = "";
            }

            if (Number.isFinite(prazninaSirina) && prazninaSirina > zidSirina) {
                sirinaError.textContent = `Praznina ne može biti šira od zida (${zidSirina}m).`;
            } else {
                sirinaError.textContent = "";
            } */
            
}
    </script>
}
